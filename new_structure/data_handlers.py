from abc import ABC, abstractmethod
from collections import namedtuple

import project_io
import reactions
import utils
import iterators


class IDataHandler(ABC):
    """
    Interface for classes that couple together specific IO classes in order to supply and write data for a specific
    Generator class.
    """

    @abstractmethod
    def __init__(self, data_format):
        """
        Abstract initializer used to instantiate the IO classes for loading and saving the data required and generated
        by the derived DataHandler's coupled Generator class.

        Args:
            data_format (str): The format of the data to load from and save to. Can either be 'json' or 'mongo'
        """

    @abstractmethod
    def load(self):
        """
        Abstract method for calling load on each IO class of the specific derived DataHandler and returning the data
        in a tuple.
        """

    @abstractmethod
    def save(self, data):
        """
        Abstract method for calling save() on the IO class used for saving data in the specific derived DatSupplier.
        """


class SCCMDataHandler(IDataHandler):
    """
    Implementation of a DataHandler used to supply and write the data needed and generated by the SideChainGenerator
    Generator.
    """

    def __init__(self, data_format):

        if data_format == 'json':
            id_io = project_io.JsonIDIO()
            self._sidechain_io = project_io.JsonSideChainIO()
        elif data_format == 'mongo':
            id_io = project_io.MongoIDIO()
            self._sidechain_io = project_io.MongoSideChainIO()

        self.id_iterator = iterators.IDIterator(id_io)

    def load(self):

        SideChainGeneratorData = namedtuple('SideChainGeneratorData', 'sidechains')
        return SideChainGeneratorData(self._sidechain_io.load())

    def save(self, data):

        self._sidechain_io.save(data)
        self.id_iterator.save()


class MGDataHandler(IDataHandler):
    """
    Implementation of a DataHandler used to supply and write the data needed and generated by the MonomerGenerator
    Generator.
    """

    def __init__(self, data_format):

        if data_format == 'json':
            index_io = project_io.JsonIndexIO()
            self._sidechain_loader = project_io.JsonSideChainIO()
            self._monomer_saver = project_io.JsonMonomerIO()
        elif data_format == 'mongo':
            index_io = project_io.MongoIndexIO()
            self._sidechain_loader = project_io.MongoSideChainIO()
            self._monomer_saver = project_io.MongoMonomerIO()

        self.index_iterator = iterators.IndexIterator(index_io)

    def load(self):

        MonomerGeneratorData = namedtuple('MonomerGeneratorData', 'sidechains')
        return MonomerGeneratorData(self._sidechain_loader.load())

    def save(self, data):

        self._monomer_saver.save(data)
        self.index_iterator.save()


class PGDataHandler(IDataHandler):
    """
    Implementation of a DataHandler used to supply and write the data needed and generated by the PeptideGenerator
    Generator.
    """

    def __init__(self, data_format):

        if data_format == 'json':
            self._monomer_loader = project_io.JsonMonomerIO()
            self._peptide_saver = project_io.JsonPeptideIO()
        elif data_format == 'mongo':
            self._monomer_loader = project_io.MongoMonomerIO()
            self._peptide_saver = project_io.MongoPeptideIO()

    def load(self):
        PeptideGeneratorData = namedtuple('PeptideGeneratorData', 'monomers peptide_length')
        return PeptideGeneratorData(self._monomer_loader.load(), 3)

    def save(self, data):

        self._peptide_saver.save(data)


class TPGDataHandler(IDataHandler):

    def __init__(self, data_format):

        if data_format == 'json':
            self._peptide_loader = project_io.JsonPeptideIO()
            self._template_peptide_saver = project_io.JsonTemplatePeptideIO()
        elif data_format == 'mongo':
            self._peptide_loader = project_io.MongoPeptideIO()
            self._template_peptide_saver = project_io.MongoTemplatePeptideIO()

    def load(self):

        TemplatePeptideGeneratorData = namedtuple('TemplatePeptideGeneratorData', 'peptides')
        return TemplatePeptideGeneratorData(self._peptide_loader.load())

    def save(self, data):

        self._template_peptide_saver.save(data)


class MCGDataHandler(IDataHandler):

    def __init__(self, data_format):

        if data_format == 'json':
            self._template_peptide_loader = project_io.JsonTemplatePeptideIO()
            self._reaction_loader = project_io.JsonReactionIO()
            self._macrocycle_saver = project_io.JsonMacrocycleIO()
        elif data_format == 'mongo':
            self._template_peptide_loader = project_io.MongoTemplatePeptideIO()
            self._reaction_loader = project_io.MongoReactionIO()
            self._macrocycle_saver = project_io.MongoMacrocycleIO()

    def load(self):

        MacrocycleGeneratorData = namedtuple('MacrocycleGeneratorData', 'template_peptides reactions')
        return MacrocycleGeneratorData(self._template_peptide_loader.load(), self._reaction_loader.load())

    def save(self, data):

        self._macrocycle_saver.save(data)


class UMRGDataHandler(IDataHandler):

    def __init__(self, data_format):

        self._templates = utils.get_templates()
        self._reactions = utils.get_unimolecular_reactions()
        if data_format == 'json':
            self._reaction_saver = project_io.JsonReactionIO()
        elif data_format == 'mongo':
            self._reaction_saver = project_io.MongoReactionIO()

    def load(self):

        UniMolecularReactionGenerationData = namedtuple('UniMolecularReactionGenerationData', 'mols reactions')
        return UniMolecularReactionGenerationData(self._templates, self._reactions)

    def save(self, data):

        self._reaction_saver.save(data)


class BMRGDataHandler(IDataHandler):

    def __init__(self, data_format):

        self._reactions = utils.get_bimolecular_reactions()
        if data_format == 'json':
            self._sidechain_loader = project_io.JsonSideChainIO()
            self._reaction_saver = project_io.JsonReactionIO()
        elif data_format == 'mongo':
            self._sidechain_loader = project_io.MongoSideChainIO()
            self._reaction_saver = project_io.MongoReactionIO()

    def load(self):

        BiMolecularReactionGeneratorData = namedtuple('BiMolecularReactionGeneratorData', 'sidechains reactions')
        return BiMolecularReactionGeneratorData(self._sidechain_loader.load(), self._reactions)

    def save(self, data):

        self._reaction_saver.save(data)
